@startuml

class ParkingSpot {
  - parkingSpotId : int
  - parkingPrice : int
  - spotType : SpotType
  - isAvailable : Boolean
  - vehicle : Vehicle
  + parkVehicle(vehicle : Vehicle)
  + removeVehicle()
  + getParkingSpotId() : int
  + isAvailable() : Boolean
}

class TwoWheelerSpot {
  + price() : int
}

class FourWheelerSpot {
  + price() : int
}

class ParkingSpotManager {
  - parkingList : List<ParkingSpot>
  + ParkingSpotManager(parkingList : List<ParkingSpot>)
  + findParkingSpace(vehicleType : VehicleType) : ParkingSpot
  + addParkingSpace(spot : ParkingSpot)
  + removeParkingSpace(spot : ParkingSpot)
  + parkVehicle(vehicle : Vehicle, spot : ParkingSpot)
  + removeVehicle(spot : ParkingSpot)
}

class TwoWheelerManager {
  - parkingList : List<ParkingSpot>
  + TwoWheelerManager(parkingList : List<ParkingSpot>, strategy : ParkingStrategy)
}

class FourWheelerManager {
  - parkingList : List<ParkingSpot>
  + FourWheelerManager(parkingList : List<ParkingSpot>, strategy : ParkingStrategy)
}

interface ParkingStrategy {
  + findSpot(parkingList : List<ParkingSpot>) : ParkingSpot
}

class NearToEntranceStrategy {
  + findSpot(parkingList : List<ParkingSpot>) : ParkingSpot
}

class NearToEndAndElevatorStrategy {
  + findSpot(parkingList : List<ParkingSpot>) : ParkingSpot
}

class DefaultStrategy {
  + findSpot(parkingList : List<ParkingSpot>) : ParkingSpot
}

enum VehicleType {
  CAR, BUS, BIKE
}

class Vehicle {
  - vehicleNo : int
  - vehicleType : VehicleType
  + Vehicle(vehicleNo : int, vehicleType : VehicleType)
  + getVehicleNo() : int
  + getVehicleType() : VehicleType
}

class Ticket {
  - entryTime : long
  - vehicle : Vehicle
  - parkingSpot : ParkingSpot
  + Ticket(entryTime : long, vehicle : Vehicle, parkingSpot : ParkingSpot)
  + getEntryTime() : long
  + getVehicle() : Vehicle
  + getParkingSpot() : ParkingSpot
}

class ParkingSpotFactory {
  + getParkingSpotManager(vehicleType : VehicleType) : ParkingSpotManager
}

class EntranceGate {
  - parkingSpotFactory : ParkingSpotFactory
  - parkingSpotManager : ParkingSpotManager
  + EntranceGate(parkingSpotFactory : ParkingSpotFactory, parkingSpotManager : ParkingSpotManager)
  + findSpace(vehicleType : VehicleType, entranceGateNo : int) : ParkingSpot
  + bookSpot(vehicle : Vehicle) : ParkingSpot
  + generateTicket(vehicle : Vehicle, parkingSpot : ParkingSpot) : Ticket
}

class ExitGate {
  - ticket : Ticket
  - parkingSpotManager : ParkingSpotManager
  - costComputation : CostComputation
  - costComputationFactory : CostComputationFactory
  + ExitGate(ticket : Ticket, parkingSpotManager : ParkingSpotManager, costComputationFactory : CostComputationFactory)
  + price() : int
  + processPayment()
}

class PaymentStrategy {
  + pay(amount : int)
}

class CreditCardStrategy {
  + pay(amount : int)
}

class UPIStrategy {
  + pay(amount : int)
}

class CostComputationFactory {
  + getCostComputation(vehicleType : VehicleType) : CostComputation
}

class CostComputation {
  - pricingStrategy : PricingStrategy
  + CostComputation(pricingStrategy : PricingStrategy)
  + computeCost(duration : long) : int
}

class TwoWheelerCostComputation {
  + computeCost(duration : long) : int
}

class FourWheelerCostComputation {
  + computeCost(duration : long) : int
}

class PricingStrategy {
  + calculatePrice(duration : long) : int
}

class HourlyPriceStrategy {
  + calculatePrice(duration : long) : int
}

class MinuteWisePriceStrategy {
  + calculatePrice(duration : long) : int
}

' Relationships
ParkingSpot <|-- TwoWheelerSpot : inherits
ParkingSpot <|-- FourWheelerSpot : inherits
ParkingSpotManager <|-- TwoWheelerManager : inherits
ParkingSpotManager <|-- FourWheelerManager : inherits
ParkingSpotManager *-- ParkingSpot : manages
ParkingSpotFactory *-- ParkingSpotManager : creates
EntranceGate o-- ParkingSpotManager : uses
EntranceGate o-- ParkingSpotFactory : uses
ExitGate o-- ParkingSpotManager : uses
ExitGate o-- CostComputationFactory : uses
CostComputationFactory o-- CostComputation : creates
CostComputation o-- PricingStrategy : uses
CostComputation <|-- TwoWheelerCostComputation : inherits
CostComputation <|-- FourWheelerCostComputation : inherits
PricingStrategy <|-- HourlyPriceStrategy : inherits
PricingStrategy <|-- MinuteWisePriceStrategy : inherits
PaymentStrategy <|-- CreditCardStrategy : inherits
PaymentStrategy <|-- UPIStrategy : inherits

@enduml
